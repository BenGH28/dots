#!/usr/bin/env python
"""
A script to change my qtile colourscheme from light to dark
This script is specific to this configuration.  It looks for a
boolean variable called 'is_dark' and will alter it
according to user input.

Usage: qtile-themer [OPTIONS] theme

themile has the option to change your GTK theme.
Pass in the option '--gtk' to apply you desired theme. You will have
to edit this script first to ensure you apply the correct themes.

If you use alacritty and have the tool alacritty-theme installed
from Cargo then you can also use the option '--alacritty' to toggle
its theme also.

Setting the option '--both' will toggle both gtk and alacritty themes.
"""

import os
import argparse
from termcolor import colored


def toggle_qtile_theme(toggle: str) -> None:
    """Change the qtile theme
    :param toggle: the commandline argumet that is passed in
    :return None
    """
    string_to_bool = {"light": False, "dark": True}
    if toggle in string_to_bool:
        boolean_toggle = string_to_bool[toggle]
    else:
        raise Exception(f"{toggle} not found")
        return

    restart = False
    file = os.path.expanduser("~/.config/qtile/config.py")
    with open(file, 'r') as f:
        filelines = f.readlines()

    # looking for IS_DARK
    for i in range(0, len(filelines)):
        if filelines[i].startswith("IS_DARK"):
            ls = filelines[i].split('=')
            if ls[1].strip() != str(boolean_toggle):
                restart = True
                filelines[i] = f"IS_DARK = {boolean_toggle}\n"
                break

    # rewrite the config
    with open(file, "w") as f:
        f.writelines(filelines)

    # execute a shell command to restart qtile
    if restart is True:
        os.system("qtile cmd-obj -o cmd -f restart 2> /dev/null")


def check_gtk_themes(theme_name: str) -> bool:
    """Check that our system has the desired theme.
    :param theme_name: the theme to check is on the system
    :return true if theme exist, false otherwise.
    """
    theme_path = f'/usr/share/themes/{theme_name}/gtk-3.0'
    return os.path.isdir(theme_path)


def set_gtk_theme(file_lines: list, theme_name: str, toggle: str) -> None:
    """Apply the desired theme if possible.
    :param file_lines: the list of lines from the gtk config file
    :param theme_name: theme to set
    :return None
    """
    if toggle == "dark":
        file_lines[1] = f"gtk-theme-name={theme_name}-Dark\n"
    elif toggle == "light":
        file_lines[1] = f"gtk-theme-name={theme_name}\n"


def toggle_gtk_theme(toggle: str) -> None:
    """Change the gtk theme.
    :param toggle: the commandline argumet that is passed in
    :return None
    """
    return

    # don't think this works anymore
    file = os.path.expanduser("~/.config/gtk-3.0/settings.ini")
    with open(file, 'r') as f:
        filelines = f.readlines()

    desired_theme = 'Arc'
    fallback_theme = 'Adwaita'
    if check_gtk_themes(desired_theme):
        set_gtk_theme(filelines, desired_theme, toggle)
    else:
        set_gtk_theme(filelines, fallback_theme, toggle)

    with open(file, 'w') as f:
        f.writelines(filelines)


def toggle_terminal_theme(toggle: str) -> None:
    """
    This is only for the alacritty terminal
    :param toggle: the commandline argumet that is passed in
    :return None
    """
    if toggle == "dark":
        os.system("alacritty-theme change one_dark")
    elif toggle == "light":
        os.system("alacritty-theme change one_light")


def main():
    """
    A tool to toggle the theme in BenGH28's
    qtile config from 'light' to 'dark'
    """
    parser = argparse.ArgumentParser()

    # postional arguments
    parser.add_argument(
        'theme', help='the colourscheme you would like to set.' +
        '  Either "light" or "dark"')

    # options
    # parser.add_argument('-g', '--gtk', help='toggle gtk theme',
    #                     action='store_true')
    parser.add_argument('-a',
                        '--alacritty', help='toggle alacritty theme',
                        action='store_true')
    # parser.add_argument('-b',
    #                     '--both', help='toggle both gtk and alacritty theme',
    #                     action='store_true')
    args = parser.parse_args()

    try:
        toggle = args.theme.lower()
        assert(toggle == "light" or toggle == "dark")
    except AssertionError:
        print(colored(f'{toggle} invalid theme.', 'red'))
        print('\n')
        parser.print_help()
        return

    toggle_qtile_theme(toggle)

    if args.alacritty:
        toggle_terminal_theme(toggle)
    # if args.gtk:
    #     toggle_gtk_theme(toggle)
    # if args.both and not args.alacritty and not args.gtk:
    #     toggle_gtk_theme(toggle)
    #     toggle_terminal_theme(toggle)


if __name__ == "__main__":
    main()
